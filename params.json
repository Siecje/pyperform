{"name":"PyPerform","tagline":"An easy and convienent way to performance test python code.","body":"pyperform\r\n=========\r\n\r\nAn easy and convenient way to performance test blocks of python code.\r\nTired of writing separate scripts for your performance tests? Don't like coding in strings?\r\nUsing the pyperform decorators, you can easily implement timeit tests to your functions with just one line!\r\n\r\nFeatures\r\n========\r\nFeatures of pyperform include:\r\n\r\n    - Quick, easy to implement in-code performance tests that run once when the function is defined\r\n    - Speed comparison of several functions.\r\n    - Validation of results between ComparisonBenchmarks\r\n    - Summary reports.\r\n    - Supports class functions as well as global functions.\r\n    - Performance tests can easily be disabled/enabled globally.\r\n    - Community-driven library of performance tests to learn from.\r\n\r\nInstallation\r\n============\r\nTo install:\r\n    \r\n    pip install pyperform\r\n    \r\n\r\nUsage\r\n=====\r\n\r\nTo use pyperform to benchmark functions, you need to add one of the following decorators:\r\n\r\n    @BenchmarkedFunction(setup=None,\r\n                         classname=None,\r\n                         largs=None,\r\n                         kwargs=None\r\n                         timeit_repeat=3,\r\n                         timeit_number=1000)\r\n    \r\n    @BenchmarkedClass(setup=None,\r\n                      largs=None,\r\n                      kwargs=None,\r\n                      timeit_repeat=3,\r\n                      timeit_number=1000)\r\n    \r\n    @ComparisonBenchmark(group,\r\n                         classname=None,\r\n                         setup=None,\r\n                         largs=None,\r\n                         kwargs=None\r\n                         validation=False,\r\n                         timeit_repeat=3,\r\n                         timeit_number=1000)\r\n                         \r\n\r\nwhere largs is a list of arguments to pass to the function and kwargs is a dictionary of keyword arguments to pass to the \r\nfunction. The setup argument is described in the following section. All decorators have timeit_repeat and timeit_number\r\narguments which are can be used to set the number of trials and repetitions to use with timeit. The ComparisonBenchmark\r\nhas a validation flag, which when set to True, will attempt to compare the results of the functions in the group.\r\n\r\nImports\r\n-------\r\nImports can be added by appending the tag `#!` to the end of an import statement in a script. Pyperform will find all\r\nimport statements that are tagged with `#!` and import them into your benchmark.\r\n\r\nFor example:\r\n    \r\n    from math import log #!\r\n    \r\n    @BenchmarkedFunction(largs=(16,))\r\n    def log_base_2(x):\r\n        return log(x, 2)\r\n        \r\nResults in:\r\n\r\n    log_base_2 \t 3.567 us\r\n    \r\nAlternative, you can set the tag for pyperform to search for by calling set_import_tag(tag)` with a string argument.\r\n    \r\nThe setup argument (Optional)\r\n------------\r\nAll decorators have a setup argument which can be either a function with no arguments, or string of code. If given a\r\nfunction, the body of the function is executed in the global scope. This means that objects and variables instantiated \r\nin the body of the function are accessible from within the benchmarked function.\r\n  \r\nExample:\r\n        \r\n    from pyperform import BenchmarkedFunction\r\n    \r\n    def _setup():\r\n        a = 10\r\n    \r\n    @BenchmarkedFunction(setup=_setup, largs=(5,))\r\n    def multiply_by_a(b):\r\n        result = a * b\r\n        assert result == 50\r\n        return result\r\n        \r\nResults in:\r\n    \r\n    multiply_by_a \t 3.445 us\r\n\r\n\r\nClass-method Benchmarking\r\n-------------------------\r\nPyperform will also work on class methods, but in order to do so, we must instantiate an instance of the class.\r\nThis is done in `BenchmarkedClass`. Then once we have decorated the class with `BenchmarkedClass`, we can use\r\n`ComparisonBenchmark` or `BenchmarkedFunction` to performance test the class's methods.\r\n\r\n<b>Note that when benchmarking class methods, the `classname` argument to ComparisonBenchmark must be provided.\r\nThis argument will hopefully be removed in the future.</b>\r\n\r\nIn the BenchmarkedClass we instantiate a Person object and then run three benchmarked class-methods.\r\nTwo of the class-methods are `ComparisonBenchmarks` and will be compared with one another. To see the result, you must\r\ncall the `ComparisonBenchmark.summarize()` function. The third function is a duplicate of calculate_savings_method2 but\r\nit is a BenchmarkedFunction instead. The result of BenchmarkedFunctions is printed when the script is run.\r\n\r\n\r\n    from pyperform import BenchmarkedClass, ComparisonBenchmark, BenchmarkedFunction\r\n\r\n    @BenchmarkedClass(largs=('Calvin', 24, 1000.,), kwargs={'height': '165 cm'})\r\n    class Person(object):\r\n\r\n        def __init__(self, name, age, monthly_income, height=None, *args, **kwargs):\r\n            self.name = name\r\n            self.age = age\r\n            self.height = height\r\n            self.monthly_income = monthly_income\r\n    \r\n    \r\n        @ComparisonBenchmark('Calculate Savings', classname=\"Person\", timeit_number=100,\r\n                             validation=True, largs=(55,), kwargs={'monthly_spending': 500})\r\n        def calculate_savings_method1(self, retirement_age, monthly_spending=0):\r\n            savings = 0\r\n            for y in range(self.age, retirement_age):\r\n                for m in range(12):\r\n                    savings += self.monthly_income - monthly_spending\r\n            return savings\r\n    \r\n        @ComparisonBenchmark('Calculate Savings', classname=\"Person\", timeit_number=100,\r\n                             validation=True, largs=(55,), kwargs={'monthly_spending': 500})\r\n        def calculate_savings_method2(self, retirement_age, monthly_spending=0):\r\n            yearly_income = 12 * (self.monthly_income - monthly_spending)\r\n            n_years = retirement_age - self.age\r\n            if n_years > 0:\r\n                return yearly_income * n_years\r\n    \r\n        @BenchmarkedFunction(classname=\"Person\", timeit_number=100,\r\n                             largs=(55,), kwargs={'monthly_spending': 500})\r\n        def same_as_method_2(self, retirement_age, monthly_spending=0):\r\n            yearly_income = 12 * (self.monthly_income - monthly_spending)\r\n            n_years = retirement_age - self.age\r\n            if n_years > 0:\r\n                return yearly_income * n_years\r\n\r\n\r\n\r\nYou can print the summary to file or if ComparisonBenchmark.summarize() is not given an fs parameter, it will print to\r\nconsole.\r\n\r\n    report_file = open('report.txt', 'w')\r\n    ComparisonBenchmark.summarize(group='Calculate Savings', fs=report_file)\r\n\r\nThis results in a file `report.txt` that contains the ComparisonBenchmark's results:\r\n    \r\n    Call statement:\r\n    \r\n        instance.calculate_savings_method2(55, monthly_spending=500)\r\n    \r\n    \r\n    Function Name                       Time         % of Fastest    timeit_repeat   timeit_number \r\n    ----------------------------------------------------------------------------------------------------\r\n    \r\n    Person.calculate_savings_method2    3.814 us     100.0           3               100           \r\n    Person.calculate_savings_method1    65.479 us    5.8             3               100           \r\n    ----------------------------------------------------------------------------------------------------\r\n    \r\n    \r\n    \r\n    Source Code:\r\n    ----------------------------------------------------------------------------------------------------\r\n    def calculate_savings_method2(self, retirement_age, monthly_spending=0):\r\n        yearly_income = 12 * (self.monthly_income - monthly_spending)\r\n        n_years = retirement_age - self.age\r\n        if n_years > 0:\r\n            return yearly_income * n_years\r\n    ----------------------------------------------------------------------------------------------------\r\n    def calculate_savings_method1(self, retirement_age, monthly_spending=0):\r\n        savings = 0\r\n        for y in range(self.age, retirement_age):\r\n            for m in range(12):\r\n                savings += self.monthly_income - monthly_spending\r\n        return savings\r\n    ----------------------------------------------------------------------------------------------------\r\n\r\nand printed to the screen, the results of the BenchmarkedFunction\r\n    \r\n    same_as_method_2 \t 3.788 us\r\n    \r\nValidation\r\n==========\r\nComparisonBenchmark has a optional argument `validate`. When `validate=True`, the return value of each \r\nComparisonBenchmark in a group is compared. If the results of the function are the not same, a ValidationError is raised.\r\n \r\nExample:\r\n\r\n    from pyperform import ComparisonBenchmark\r\n    from math import sin  #!\r\n    \r\n    \r\n    @ComparisonBenchmark('Group1', validation=True, largs=(100,))\r\n    def list_append(n, *args, **kwargs):\r\n        l = []\r\n        for i in xrange(1, n):\r\n            l.append(sin(i))\r\n        return l\r\n    \r\n    \r\n    @ComparisonBenchmark('Group1', validation=True, largs=(100,))\r\n    def list_comprehension(n, *args, **kwargs):\r\n        return 1\r\n\r\nOutput:\r\n\r\n    pyperform.ValidationError: Results of functions list_append and list_comprehension are not equivalent.\r\n    list_append:\t [0.8414709848078965, 0.9092974268256817, 0.1411200080598672, -0.7568024953079282, -0.9589242746631385, -0.27941549819892586, 0.6569865987187891, 0.9893582466233818, 0.4121184852417566, -0.5440211108893698, -0.9999902065507035, -0.5365729180004349, 0.4201670368266409, 0.9906073556948704, 0.6502878401571168, -0.2879033166650653, -0.9613974918795568, -0.750987246771676, 0.14987720966295234, 0.9129452507276277, 0.8366556385360561, -0.008851309290403876, -0.8462204041751706, -0.9055783620066239, -0.13235175009777303, 0.7625584504796027, 0.956375928404503, 0.27090578830786904, -0.6636338842129675, -0.9880316240928618, -0.404037645323065, 0.5514266812416906, 0.9999118601072672, 0.5290826861200238, -0.428182669496151, -0.9917788534431158, -0.6435381333569995, 0.2963685787093853, 0.9637953862840878, 0.7451131604793488, -0.158622668804709, -0.9165215479156338, -0.8317747426285983, 0.017701925105413577, 0.8509035245341184, 0.9017883476488092, 0.123573122745224, -0.7682546613236668, -0.9537526527594719, -0.26237485370392877, 0.6702291758433747, 0.9866275920404853, 0.39592515018183416, -0.5587890488516163, -0.9997551733586199, -0.5215510020869119, 0.43616475524782494, 0.9928726480845371, 0.6367380071391379, -0.3048106211022167, -0.9661177700083929, -0.7391806966492228, 0.16735570030280691, 0.9200260381967906, 0.8268286794901034, -0.026551154023966794, -0.8555199789753223, -0.8979276806892913, -0.11478481378318722, 0.7738906815578891, 0.9510546532543747, 0.25382336276203626, -0.6767719568873076, -0.9851462604682474, -0.38778163540943045, 0.5661076368981803, 0.9995201585807313, 0.5139784559875352, -0.4441126687075084, -0.9938886539233752, -0.6298879942744539, 0.31322878243308516, 0.9683644611001854, 0.7331903200732922, -0.1760756199485871, -0.9234584470040598, -0.8218178366308225, 0.03539830273366068, 0.8600694058124533, 0.8939966636005579, 0.10598751175115685, -0.7794660696158047, -0.9482821412699473, -0.24525198546765434, 0.683261714736121, 0.9835877454343449, 0.3796077390275217, -0.5733818719904229, -0.9992068341863537]\r\n    list_comprehension:\t1","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}